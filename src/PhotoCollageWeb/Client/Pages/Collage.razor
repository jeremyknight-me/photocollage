@page "/collage"
@using Microsoft.AspNetCore.SignalR.Client
@using PhotoCollage.Common
@using PhotoCollage.Common.Settings
@using PhotoCollageWeb.Client.Extensions
@using PhotoCollageWeb.Client.Models
@using PhotoCollageWeb.Shared
@using System.Collections.Concurrent
@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IDisposable

<div id="collage-wrapper">
    <div id="loading" style="position: absolute; text-align: center; top: 20vh; width: 100vw;">
        <img src="/img/loading.gif" />
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private CollageSettings settings;
    private int index = 0;

    protected override async Task OnInitializedAsync()
    {
        this.hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/collage"))
            .ConfigureLogging(logging =>
            {
                logging.SetMinimumLevel(LogLevel.Trace);
            })
            .Build();

        this.hubConnection.On<CollageSettings>("ReceiveConnected", collageSettings => this.OnReceiveConnected(collageSettings));
        this.hubConnection.On<PhotoData>("ReceivePhoto", async (photo) => await this.OnReceivePhoto(photo));
        this.hubConnection.On<Guid>("ReceiveRemove", async (id) => await this.OnReceiveRemove(id));
        await this.hubConnection.StartAsync();
    }

    public void Dispose()
    {
        _ = this.hubConnection.DisposeAsync();
    }

    private void OnReceiveConnected(CollageSettings collageSettings)
    {
        this.settings = collageSettings;
        this.StateHasChanged();
    }

    private async Task OnReceivePhoto(PhotoData photo)
    {
        var photoSettings = new PhotoSettings
        {
            Id = photo.Id,
            Index = this.index++,
            Source = $"data:image/{photo.Extension};base64,{photo.Data}",
            HasBorder = this.settings.PhotoBorderType != BorderType.None,
            IsGrayscale = this.settings.IsGrayscale,
            MaximumRotation = this.settings.MaximumRotation,
            MaximumSize = this.settings.MaximumSize
        };
        await this.JS.AddPhoto(photoSettings);
        this.StateHasChanged();
    }

    private async Task OnReceiveRemove(Guid id)
    {
        await this.JS.RemovePhoto(id);
        this.StateHasChanged();
    }
}
